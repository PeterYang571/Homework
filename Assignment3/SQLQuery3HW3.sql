---------------------------Answer Following Questions----------------------------
--1.In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
  --I will choose Join, because Join can predict what data should be loaded to be processed and save time, unlike the sub-query 
  --where it will run all the queries and load all their data to do the processing so Join has less time complexity with better performance.

--2.What is CTE and when to use it?
  --A Common Table Expression, also called as CTE in short form, are used within SQL Server to simplify complex joins and subqueries, 
  --and to provide a means to query hierarchical data such as an organizational chart.

--3.What are Table Variables? What is their scope and where are they created in SQL Server?
  --A table variable is a local variable that has some similarities to temp tables. The table variable scope is within the batch. 
  --If you define a table variable in a stored procedure or user-defined function, the table variable will no longer exist after the stored procedure or user-defined function exits.

--4.What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
  --DELETE command is used to remove rows from the table, and WHERE clause can be used for conditional set of parameters. 
  --Commit and Rollback can be performed after delete statement.
  --TRUNCATE removes all rows from the table. Truncate operation cannot be rolled back.
  --TRUNCATE TABLE is faster and uses fewer system and transaction log resources.

--5.What is Identity column? How does DELETE and TRUNCATE affect it?
  --An identity column is a column (also known as a field) in a database table that is made up of values generated by the database. 
  --Delete command logs entry for each deleted row in the transaction log.
  --The Truncate command does not log entries for each deleted row in the transaction log. Truncate command reset the identity to tis seed value. 

--6.What is difference between “delete from table_name” and “truncate table table_name”?
  --DELETE may remove conditionally if the where clause is used whereas TRUNCATE always removes all the rows from a table, leaving the table empty and the table structure intact. 
  --The rows deleted by TRUNCATE TABLE statement cannot be restored and you can not specify the where clause in the TRUNCATE statement.

-------------------------------------Write queries for following scenarios------------------------------------------------------------------------------------------------
Use Northwind
Go
--#1
select distinct City
from Customers
where city in (SELECT City from Employees)

--#2a
select distinct City
from Customers
where city not in (SELECT City from Employees)
--#2b
select distinct c.City
from Customers c
left join Employees e
on c.City = e.City

--#3S
SELECT c.CustomerID, c.CompanyName, c.ContactName,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName, c.ContactName
ORDER BY QTY desc

--#3
SELECT c.CustomerID, c.CompanyName, c.ContactName,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.CustomerID, c.CompanyName, c.ContactName
ORDER BY QTY desc

--#4
SELECT c.City,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.City

--#5a
select u.City from Customers u group by u.City having COUNT(u.City) > 2
union
select c.City from Customers c group by c.City having COUNT(c.City) = 2
--#5b
select distinct c.Cityfrom Customers c
where c.City in (select u.City from Customers u group by u.City having COUNT(u.City) >=2 )

--#6
select distinct c.City
from Orders o inner join Customers c
on o.CustomerID = c.CustomerID
inner join [Order Details] r
on r.OrderID = o.OrderID
group by c.City, r.ProductID
having count(r.ProductID) > 2

--#7
select * from Customers c
where c.City not in
(select o.ShipCity from Orders o inner join Customers c on o.ShipCity = c.City)

--#8
WITH cte_ordersc
as(
SELECT oc.ShipCity,oc.ProductID, oc.average,DENSE_RANK() over (partition by
oc.ProductID order by oc.number) rnk FROM (
SELECT TOP(5) od.ProductID,o.ShipCity, SUM(Quantity) number,AVG(od.UnitPrice)
average FROM dbo.Orders o left join dbo.[Order Details] od on o.OrderID=od.OrderID
GROUP BY o.ShipCity, od.ProductID
ORDER BY number DESC
) oc
)
select * from cte_ordersc where rnk=1

--#9a
select e.City from Employees e
where e.City not in (
select c.City from Orders o inner join Customers c
on c.CustomerID = o.CustomerID)
--#9b
select distinct e.City from Employees e
left join Customers c
on e.City = c.City
where c.City is null

--#10
select * from
(select Top 1 e.City, count(o.OrderID) countOrder from Employees e inner join Orders o
on e.EmployeeID = o.EmployeeID
group by e.City) T1
inner join (
select Top 1 c.City, count(r.Quantity) countQuantity from [Order Details] r inner join
Orders d on r.OrderID = d.OrderID
inner join Customers c on c.CustomerID = d.CustomerID group by c.City) T2
on T1.City = T2.City;

--#11
--How do you remove the duplicates record of a table?
  --Find duplicate rows using GROUP BY clause or ROW_NUMBER() function.
  --Use DELETE statement to remove the duplicate rows.

--#12
SELECT deptname,empid,salary
FROM(
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
 e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
WHERE rnk <= 3
ORDER BY deptname,rnk

--#13
select countbydept.*
from (
 select deptid, count(*) as departCount
 from Employee
 group by deptid
 order by departCount desc
 limit 1
) as maxcount
inner join
( select dept.id, dept.`name`, count(*) as employeeCount
 from Dept
  inner join Employee on Employee.deptid = deptid
 group by deptid, deptname
) countbydept
--#14
SELECT deptname,empid,salary
FROM (
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
WHERE rnk <= 3
ORDER BY deptname,rnk